version: '3'

dotenv: ['.env']

vars:
  APPNAME:
    sh: basename $(git rev-parse --show-toplevel)
  VERSION:
    sh: git describe --tags --always --dirty="-dev"
  VERSION_SHORT:
    sh: git describe --tags --always --dirty="-dev" --abbrev=0
  IMGNAME: "ghcr.io/{{.GHCR_USER}}/{{.APPNAME}}"
  IMGLONG: "{{.IMGNAME}}:{{.VERSION}}"
  IMGSHORT: "{{.IMGNAME}}:{{.VERSION_SHORT}}"
  IMGLATEST: "{{.IMGNAME}}:latest"

tasks:
  clean:
    cmds:
      - rm -rf bin
      - docker kill $(docker ps --quiet) || true
      - docker container prune -f

  login:
    # The .env file supports the local development environment
    # To avoid GH Actions needing to create a .env file, we allow for env vars override here
    # If only this was fixed..sigh https://github.com/go-task/task/issues/1038
    env:
      DHCR_USER: "{{.DHCR_USER}}"
      DHCR_TOKEN: "{{.DHCR_TOKEN}}"
      GHCR_USER: "{{.GHCR_USER}}"
      GHCR_TOKEN: "{{.GHCR_TOKEN}}"
    cmds:
      - docker login -u {{.DHCR_USER}} --password-stdin <<< "$DHCR_TOKEN"
      - docker login ghcr.io -u {{.GHCR_USER}} --password-stdin <<< "$GHCR_TOKEN"

  build:
    cmds:
      - task: clean
      - go generate ./api/api.go
      - go build -ldflags "-w -X main.version={{.VERSION}}" -o bin/{{.APPNAME}} ./cmd/{{.APPNAME}}
      - go test -v ./...

  docker-build:
    cmds:
      - task: build
      - task: login
      - |
        docker build . \
        --build-arg APPNAME={{.APPNAME}} \
        --build-arg VERSION={{.VERSION}} \
        -t {{.IMGLONG}} \
        -t {{.IMGSHORT}} \
        -t {{.IMGLATEST}}

  push:
    cmds:
      - task: build
      - docker push --all-tags {{.IMGNAME}}

  bench:
    cmds:
      - task: login
      - docker run -d -p 8080:8080 {{.IMGLATEST}}
      - docker run --rm --net=host ghcr.io/six-ddc/plow http://localhost:8080/hello -c 20

  lint: # WIP - this image is 6GB!!
    cmds:
      - task: login
      - docker run -e LOG_LEVEL=DEBUG -e RUN_LOCAL=true -v .:/tmp/lint ghcr.io/super-linter/super-linter:latest

  default:
    cmds:
      - task: bench
